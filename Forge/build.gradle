buildscript {
  repositories {
    maven { url = 'https://maven.minecraftforge.net' }
    mavenCentral()
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
  }
}

plugins {
  id 'com.matthewprenger.cursegradle' version '1.4.0'
  id 'nu.studer.credentials' version '1.0.7'
  id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

archivesBaseName = "${mod_id}-forge-${minecraft_version}"

minecraft {
  mappings channel: 'official', version: minecraft_version

  if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    project.logger.debug('Forge Access Transformers are enabled for this project.')
  }

  runs {
    client {
      workingDirectory project.file('run')
      ideaModule "${rootProject.name}.${project.name}.main"
      taskName 'Client'
      property 'mixin.env.remapRefMap', 'true'
      property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
      mods {
        modClientRun {
          source sourceSets.main
          source project(":Common").sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('run')
      ideaModule "${rootProject.name}.${project.name}.main"
      taskName 'Server'
      property 'mixin.env.remapRefMap', 'true'
      property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
      mods {
        modServerRun {
          source sourceSets.main
          source project(":Common").sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('run')
      ideaModule "${rootProject.name}.${project.name}.main"
      args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
      taskName 'Data'
      property 'mixin.env.remapRefMap', 'true'
      property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
      mods {
        modDataRun {
          source sourceSets.main
          source project(":Common").sourceSets.main
        }
      }
    }
  }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
  minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
  compileOnly project(":Common")

  // Additional helpful Mods for development
  runtimeOnly fg.deobf("curse.maven:jei-238222:3922508")
}

tasks.withType(JavaCompile) {
  source(project(":Common").sourceSets.main.allSource)
}

processResources {
  from project(":Common").sourceSets.main.resources
}


jar.finalizedBy('reobfJar')

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId project.group
      artifactId project.archivesBaseName
      version project.version
      artifact jar
    }
  }
  repositories {
    maven {
      url "file://" + System.getenv("local_maven")
    }
  }
}

curseforge {
  apiKey = "${credentials.curseforge_api_token}"
  project {
    id = "${curseforge_project_id}"
    changelog = file("../CHANGELOG.md")
    changelogType = 'markdown'
    releaseType = 'release'
    addGameVersion("${minecraft_version}")
    addGameVersion("Forge")
  }
  options {
    forgeGradleIntegration = true
  }
}

modrinth {
  token = "${credentials.modrinth_api_token}"
  projectId = "${modrinth_project_id}"
  versionNumber = "${version}"
  versionType = "${modrinth_release_type}"
  uploadFile = jar
  gameVersions = ["${minecraft_version}"]
  loaders = ["forge"]
}
